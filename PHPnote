$this
	The pseudo-variable $this is available inside any class method when that method is called from within an object context. $this is a reference to the calling object (usually the object to which the method belongs, but possibly another object, if the method is called statically from the context of a secondary object).

Properties 
	Class member variables are called "properties".

constant
	Note that class constants are allocated once per class, and not for each class instance.

Autoloading Classes
	The spl_autoload_register() function registers any number of autoloaders, enabling for classes and interfaces to be automatically loaded if they are currently not defined. By registering autoloaders, PHP is given a last chance to load the class or interface before it fails with an error.

	Although the __autoload() function can also be used for autoloading classes and interfaces, it's preferred to use the spl_autoload_register() function. This is because it is a more flexible alternative (enabling for any number of autoloaders to be specified in the application, such as in third party libraries).

	Autoloading is not available if using PHP in CLI

Constructor
	 Classes which have a constructor method call this method on each newly-created object, so it is suitable for any initialization that the object may need before it is used.

	 Parent constructors are not called implicitly if the child class defines a constructor. In order to run a parent constructor, a call to parent::__construct() within the child constructor is required. 

 	Unlike with other methods, PHP will not generate an E_STRICT level error message when __construct() is overridden with different parameters than the parent __construct() method has.

Destructor
	The destructor method will be called as soon as there are no other references to a particular object, or in any order during the shutdown sequence.

	Like constructors, parent destructors will not be called implicitly by the engine. In order to run a parent destructor, one would have to explicitly call parent::__destruct() in the destructor body. Also like constructors, a child class may inherit the parent's destructor if it does not implement one itself.

	The destructor will be called even if script execution is stopped using exit(). Calling exit() in a destructor will prevent the remaining shutdown routines from executing.

	Attempting to throw an exception from a destructor (called in the time of script termination) causes a fatal error.

Visibility
	Class properties must be defined as public, private, or protected. If declared using var, the property will be defined as public.

	Class members declared public can be accessed everywhere. 

	Members declared protected can be accessed only within the class itself and by inheriting classes.

	Members declared as private may only be accessed by the class that defines the member.

	Property Visibility
		Class properties must be defined as public, private, or protected. If declared using var, the property will be defined as public.

	Method Visibility
		Class methods may be defined as public, private, or protected. Methods declared without any explicit visibility keyword are defined as public.

	Constant Visibility
		As of PHP 7.1.0, class constants may be defined as public, private, or protected. Constants declared without any explicit visibility keyword are defined as public.

	Visibility from other objects
		Objects of the same type will have access to each others private and protected members even though they are not the same instances. This is because the implementation specific details are already known when inside those objects.

	Object Inheritance
		nheritance is a well-established programming principle, and PHP makes use of this principle in its object model. 

	Scope Resolution Operator
		The Scope Resolution Operator is the double colon that allows access to static, constant, and overridden properties or methods of a class.

		When referencing these items from outside the class definition, use the name of the class.

		Three special keywords self, parent and static are used to access properties or methods from inside the class definition.

		When an extending class overrides the parents definition of a method, PHP will not call the parent's method. This also applies to Constructors and Destructors, Overloading, and Magic method definitions.

	Static Keyword
		static can also be used to define static variables and for late static bindings.

		Declaring class properties or methods as static makes them accessible without needing an instantiation of the class. A property declared as static cannot be accessed with an instantiated class object (though a static method can).

		Static Method
			Because static methods are callable without an instance of the object created, the pseudo-variable $this is not available inside the method declared as static.

		Static Properties
			Static properties cannot be accessed through the object using the arrow operator ->

	Class Abstraction
		Classes defined as abstract may not be instantiated, and any class that contains at least one abstract method must also be abstract.

		Methods defined as abstract simply declare the method's signature - they cannot define the implementation

		When inheriting from an abstract class, all methods marked abstract in the parent's class declaration must be defined by the child; additionally, these methods must be defined with the same (or a less restricted) visibility. 

	Object Interfaces
		Interfaces are defined in the same way as a class, but with the interface keyword replacing the class keyword and without any of the methods having their contents defined.

		All methods declared in an interface must be public; this is the nature of an interface.

		The class implementing the interface must use the exact same method signatures as are defined in the interface. Not doing so will result in a fatal error.

		Constants
			 Interface constants works exactly like class constants except they cannot be overridden by a class/interface that inherits them

	 Traits
	 	Traits are a mechanism for code reuse in single inheritance

	 	A Trait is intended to reduce some limitations of single inheritance by enabling a developer to reuse sets of methods freely in several independent classes living in different class hierarchies.

	 	It is not possible to instantiate a Trait on its own. 

	 	Precedence
	 		An inherited member from a base class is overridden by a member inserted by a Trait. The precedence order is that members from the current class override Trait methods, which in turn override inherited methods.

	 	Conflict Resolution
	 		If two Traits insert a method with the same name, a fatal error is produced, if the conflict is not explicitly resolved.

	Anonymous classes 
		Support for anonymous classes was added in PHP 7. 

	Overloading
		Overloading in PHP provides means to dynamically "create" properties and methods. These dynamic entities are processed via magic methods one can establish in a class for various action types.

		All overloading methods must be defined as public.

	Object Iteration
		PHP 5 provides a way for objects to be defined so it is possible to iterate through a list of items, with, for example a foreach statement. By default, all visible properties will be used for the iteration.

	Magic Methods
		The function names __construct(), __destruct(), __call(), __callStatic(), __get(), __set(), __isset(), __unset(), __sleep(), __wakeup(), __toString(), __invoke(), __set_state(), __clone() and __debugInfo() are magical in PHP classes. 

	Final Keyword
		PHP 5 introduces the final keyword, which prevents child classes from overriding a method by prefixing the definition with final. If the class itself is being defined final then it cannot be extended.

		Properties cannot be declared final, only classes and methods may be declared as final.